<#@ template hostSpecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(TargetDir)/MasonApps.HRManager.dll" #>
<#@ assembly name="$(SolutionDir)/HRMSTest/ThirdParty/netstandard.dll" #>

using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace HRMSTest
{
    [TestClass]
    public class TestHRManagerClassProperties
    {

<# 
const string DLL_PATH ="$(TargetDir)/MasonApps.HRManager.dll";

var a = Assembly.LoadFile(ResolveDLLPath(DLL_PATH)); 
var tups =  new List<Tuple<string, string, string>>();

AppendTypes(tups, a);

foreach(var prop in tups) {
#>
        [TestMethod]
        public void Get<#=  prop.Item2 #>_<#= prop.Item3 #>_EqualsAssignedValue()
        {
                var foo = new <#=  prop.Item1 #>();

                foo.<#=  prop.Item3 #> = "foo";
                Assert.AreEqual("foo",foo.<#=  prop.Item3 #>);

                foo.<#=  prop.Item3 #> = "foo2";
                Assert.AreEqual("foo2",foo.<#=  prop.Item3 #>);
        }

<#
} 
#>
    }
}
<#+
        private string ResolveDLLPath(string dllName) => this.Host.ResolveAssemblyReference(dllName);

        private void AppendTypes(List<Tuple<string, string, string>> list, Assembly a)
        {
            var types = a.GetTypes();
            Array.Sort(types,
                delegate (Type type1, Type type2)
                {
                    return string.Compare(type1.FullName, type2.FullName, StringComparison.Ordinal);
                });

            foreach (Type type in types)
            {
                if (type.IsClass)
                {
                    AppendProperties(list, type);                    
                }
                else if (type.IsEnum)
                {
                    AppendEnum(type);
                }

            }
        }

        private void AppendEnum(Type e)
        {
            var enumNames = Enum.GetNames(e);
            var enumValues = Enum.GetValues(e);
        }

        private void AppendProperties(List<Tuple<string, string, string>> list, Type type)
        {
            // get all public static properties of MyClass type
            var propertyInfos = type.GetProperties();

            // sort properties by name
            Array.Sort(propertyInfos,
                        delegate (PropertyInfo propertyInfo1, PropertyInfo propertyInfo2)
                        {
                            return string.Compare(propertyInfo1.Name, propertyInfo2.Name, StringComparison.Ordinal);
                        });

            // write property names
            foreach (var propertyInfo in propertyInfos)
            {
                if (propertyInfo.PropertyType == typeof(string))
                {
                    list.Add(Tuple.Create(type.FullName, type.Name, propertyInfo.Name));
                }
            }
        }
#>