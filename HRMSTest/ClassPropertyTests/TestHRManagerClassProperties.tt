<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)/HRMSTest/ThirdParty/netstandard.dll" #>
<#@ assembly name="$(SolutionDir)/packages/NETStandard.Library.2.0.1/build/netstandard2.0/ref/System.Runtime.dll" #>
<#@ assembly name="$(SolutionDir)/packages/NETStandard.Library.2.0.1/build/netstandard2.0/ref/System.Collections.dll" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)/HRMSTest.dll" #>
<#@ assembly name="$(TargetDir)/MasonApps.HRManager.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HRMSTest.Collector" #>

using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace HRMSTest
{
    [TestClass]
    public class TestHRManagerClassProperties
    {
     
<#  
    const string DLL_PATH = "$(TargetDir)/MasonApps.HRManager.dll";

    var _collector = new CollectorForAssembly();


    var a = Assembly.LoadFile(ResolveDLLPath(DLL_PATH)); 

    AppendTypes(_collector, a);

    foreach(var classCollector in _collector.ClassCollectors)
    {
#>
    // Class: <#= classCollector.Name #>

<#
    foreach(var attributeCollector in classCollector.AttributeCollectors)
    { 
        if (attributeCollector.DataType.Equals("System.String"))
        {
#>
       
        [TestMethod]
        public void Get<#= classCollector.Name #>_<#= attributeCollector.Name #>_EqualsAssignedValue()
        {
            var foo = new <#=  classCollector.FullyQualifiedName #>();

            foo.<#=  attributeCollector.Name #> = "foo";
            Assert.AreEqual("foo",foo.<#=  attributeCollector.Name #>);

            foo.<#=  attributeCollector.Name #> = "foo2";
            Assert.AreEqual("foo2",foo.<#=  attributeCollector.Name #>);
        }

<#
        }
        else
        {
#>
        [TestMethod]
        public void Object<#= classCollector.Name #>_<#= attributeCollector.Name #>_IsInitialized()
        {
            var foo = new <#=  classCollector.FullyQualifiedName #>();
            Assert.IsNotNull(foo.<#=  attributeCollector.Name #>);
        }

<#
        }
    }
}
#>
    }
}


<#+
        private string ResolveDLLPath(string dllName) => this.Host.ResolveAssemblyReference(dllName);

        private void AppendTypes(CollectorForAssembly collector, Assembly a)
        {
            var types = a.GetTypes();
            var enumCollectors = new List<CollectorForEnum>();
            Array.Sort(types,
                delegate (Type type1, Type type2)
                {
                    return string.Compare(type1.FullName, type2.FullName, StringComparison.Ordinal);
                });

            foreach (Type type in types)
            {
                if (type.IsClass)
                {
                    CollectorForClass classCollector = new CollectorForClass(type.FullName, type.Name);
                    AppendProperties(classCollector, type);
                    collector.ClassCollectors.Add(classCollector);
                }
                else if (type.IsEnum && type.Name.EndsWith("Attributes", StringComparison.Ordinal))
                {
                    enumCollectors.Add(AppendEnum(type));
                }

            }

            //Assign enums to respective classes
            foreach(var collectedEnum in enumCollectors)
            {
                var className = collectedEnum.EnumName.Replace("Attributes","");
                foreach(var classs in collector.ClassCollectors)
                {
                    if (className.Equals(classs.Name))
                    {
                        classs.AttributeEnumCollector = new CollectorForEnum(
                            collectedEnum.EnumName, collectedEnum.Names, collectedEnum.Values);
                        break;
                    }
                }
            }

        }

        private CollectorForEnum AppendEnum(Type e) => new CollectorForEnum(e.Name, Enum.GetNames(e), Enum.GetValues(e));

        private void AppendProperties(CollectorForClass c, Type type)
        {
            var propertyInfos = type.GetProperties();

            // sort properties by name
            Array.Sort(propertyInfos,
                        delegate (PropertyInfo propertyInfo1, PropertyInfo propertyInfo2)
                        {
                            return string.Compare(propertyInfo1.Name, propertyInfo2.Name, StringComparison.Ordinal);
                        });

            foreach (var propertyInfo in propertyInfos)
            {
                c.AttributeCollectors.Add(new CollectorForAttribute(propertyInfo.Name, propertyInfo.PropertyType.FullName));
            }
        }
#>